///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Restful API design study
=========================
    *   For this REST API Design study, I thought it would be neat to lay out everything step-by-step
        so that you can get a sense of how the design process works and how the gradual app builds out.
    *   For this study, Im trying to be as thorough as possible in walking through each of the "phases" which
        address specific milestones in the project build.
    *   Directly below, you will see a summary of the build process, and directly below that section you will
        see each phase well documented with steps, notes from my experience, and the code itself.

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

    STUDY SUMMARY
    ==============
    P1: Project Setup                           --   Create folder, install dependencies, install developer dependencies, create initial 
                                                     application files (e.g. server.js, etc.).
    P2: Create Basic Server                     --   Load Express library, instantiate app, and create server in server.js.
    P3: Setup database connection               --   Load mongoose, connect to mongodb, verify connection logic, create .env file.
    P4: Setup initial middleware                --   Add built-in middleware like express.json (lets out server accept JSON as a body).
    P5: Setup Router(s)                         --   Create route folder, Setup Router in server.js, create Route file(s) in routes folder, use given routes, setup route files.
    P6: Create Routes in Router(s)              --   



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




PHASE 1: Project setup:
=======================
    SHORT version
    =============
    //Project setup:
        1.   projectFolder                                           -- Setup project folder (and move into it).
        2.   npm init                                                -- Create a package.json file.
    //Install application dependencies:
        3.   npm install express                                     -- Install the express framework.
             npm install <dependencies>                              -- Install other dependencies for your project.
    // Install development dependencies:
        4.   npm install --save-dev dotenv nodemon                   -- Install developer dependencies just for development (i.e. not part of the production code)
    // Create custom "devStart" script in package.json > scripts:
        5.   "devStart": "nodemon server.js"                         -- When you run this, your server will run/restart while developing your code. 
    // Create your initial application files:
        6.1.   server.js                                             -- Creates a .js file for server code.
        6.2.   .env                                                  -- Creates a file used by the dotenv package to define environment variables persistently.
        6.3.   .gitignore                                            -- Creates a file that tells git/github NOT to track the listed files/folders.



    EXTENDED version
    =================
        STEP 1: Create and move into project folder:
        ============================================
            *  Nothing magic here, just moving into the project folder. 



        STEP 2: Run "npm init" to create a package.json package:
        ========================================================
            * When you write "npm init", you are essentially creating a package.json file, which is essentially lists
              the packages that are in your dependencies.

            * Although there are more than a few ways to initialize the project, but here are 2 tried-and-true ways:
            
                1. Write "npm init" and fill out the details of your project for the package.json files:
                ---------------
                npm init
                ---------------

                --OR--
                
                2. Write "npm init" and add the -y flag which will essentially say yes to all the default settings. 
                ---------------
                npm init -y
                ---------------



        STEP 2: Install APPLICATION dependencies:
        =========================================
            *   Application dependencies are some of the application-centric npm packages that will help that make your
                your app do what it does. In this case, we want to install "express" (so that we can create an express app)
                and mongoose (which will help us interact with mongoDB).

            *   You can do this one of THREE ways:

                1. Go into your package.json folder, create a "dependencies" property and list out the the dependencies
                   one by one (e.g. "express": "*") where the key represents the package name and the value "*" represents
                   the most current version.  
                
                    ----------------------------
                    "dependencies": {
                        "express": "*",
                        "mongoose": "*"
                    }
                    ----------------------------

                *   Then, you then go to gitbash and write:
                    ----------------------
                    npm install
                    ----------------------
                        * This is also useful if you are cloning a repository because you will be able to install the dependencies 
                        used in the project on your local machine!

                    
        SPECIAL NOTE:   Its a LOT easier just to do it the second way because you have to manually create the dependencies 
                        property this way, THEN run "npm install" anyway.  I would suggest that if you do want to do it this way, 
                        write "npm install express" first (which then creates the "node_modules" folder AND automatically creates
                        the dependencies propert) then go to your package.json file and install each dependencies you want.  This is
                        also a good way to do it if you have to install certain build versions that are NOT current for your project.
                
            --OR--

                2. In gitbash (in your project folder), write the following:
                --------------------------------
                npm install express mongoose 
                --------------------------------



        STEP 3: Install DEVELOPMENT dependencies
        ========================================
            *  Development dependencies are dependencies that are used for DEVELOPMENT ONLY and they DO NOT get installed in the 
               production version of your application.
                ------------------------------------------
                npm install --save-dev dotenv nodemon
                ------------------------------------------

                    * "--save-dev" means that the following npm modules will be saved in the development (i.e. dev) 
                    * "dotenv" allows us to pull environment variables from the "dotenv" file.
                    * "nodemon" allows us to have restart our server as we change the code.



        STEP 4: In package.json file, add your custom dev scripts:
        ==========================================================
            *   Custom dev scripts will allow you to run your application during development however you wish.

                1. First, remove the "test" property (dont need it).
                2. Add a "devStart" property with a value of "nodemon server.js"

                ----------------------------------------------
                "devStart": "nodemon server.js"
                ----------------------------------------------

            *   What "devStart" does is when you are in gitbash and you want to run your application locally during development,
                all you need to do is type "nodemon server.js" and you will be able to have the application run and restart while
                you make changes to the code. 


        STEP 5: Create initial files for the project:
        =========================================================
            *   These files are essentially early in development.

                1. server.js      -- This file will be for the server code.
                2. .env           -- This file is used by the dotenv package to define environment variables persistently.
                3. .gitignore     -- This file will tell github to NOT track certain files, such as node_modules.



PHASE 2: Create the BASIC server:
=================================
    SHORT VERSION
    =================
        1.  Load express and instantiate the app using express.
        2.  Create a server. 
        3.  Test server.


    EXTENDED VERSION
    =================
        STEP 1: Load the Express module and instantiate the app:
        ========================================================
            *   Since we are creating an Express app (as opposed to a node app which requires more code, etc.), we need to Load
                the Express library from the package you installed as a dependency (i.e. npm express). 
            *   And since the "express" variable is a function, you can run it on a second line as the "app" variable.
                --------------------------------------------------
                const express = require('express');
                const app = express();    
                --------------------------------------------------    


        STEP 2: Create a server to listen for client requests:
        ======================================================
            *   To start the server, you need to tell the "app" to "listen" (i.e. app.listen) and pass the port number (i.e. 3000).
            *   What this does is that when you run "npm run devStart" (remember, this is the custom dev script from earlier), the 
                server will be listening on port 3000 for requests.
            *   Then, when you go to your browser and type "localhost:3000", you will see your basic application running.
                -------------------------------------------------------
                app.listen(3000, function() {
                    console.log('Your app is listening on Port 3000...);
                })
                ------------------------------------------------------- 


        OPTIONAL: Run "npm run devStart" to test your server:
        ===================================================== 
            * The result when you run "npm run devStart" will be:
                    --------------------------------------------------------------------------------------------
                    $ npm run devStart

                    > study-restful-api-design@1.0.0 devStart C:\Users\Admin\Desktop\Study-RESTful-API-Design
                    > nodemon server.js

                    [nodemon] 1.19.1
                    [nodemon] to restart at any time, enter `rs`
                    [nodemon] watching: *.*
                    [nodemon] starting `node server.js`
                    Server is running on Port 3000...

                    --------------------------------------------------------------------------------------------


PHASE 3: Setup your database connection:
=========================================
    *   To use a database to store your data (as opposed to static storage which clears every time you restart 
        your app), you need to utilize "mongoose", a dependency you installed earlier which helps connect Your
        application with your mongoDB database.

    SHORT VERSION
    ==============
        1. Load mongoose.
        2. Connect to mongodb.
        3. Resolve any deprecation warnings.
        4. Add connection verification logic.
        5. Relocate database string into .env file.

    EXTENDED VERSION
    ================     
        STEP 1: Load the "mongoose" library:
        ====================================
            *   Assuming you already added mongoose to your list of dependencies, load the library into your project.
                --------------------------------------------
                const mongoose = require('mongoose');
                --------------------------------------------


        STEP 2.1: Connect to the Mongo Database:
        ======================================
            *   Then, simply connect to your MongoDB database!
            *   Note that this can be either localhost or hosted (in this study, its localhost).
            *   Below, we are connecting to mongoDB via mongoose with a database connection string that links to:

        Database string =   databas      local storage    database name
                                    \            |            /
                -------------------------------------------------------
                mongoose.connect('mongodb://localhost/subscribers');
                -------------------------------------------------------

                DEVELOPMENT NOTE: The string above is TEMPORARY because it is only for the localhost.  We'll want
                                the database hosted later on with environment variables (see STEP 5);


        STEP 2.2: Resolve deprecation warning:
        ======================================
            *   When you run "npm run devStart", you will see a "deprecation warning", meaning that some technology is being
                phased out or suspended.  In the case of this study, the deprecation is for "URL string parser".

                -------------------------------------------------------------------------------------------------------
                
                $ npm start devStart

                > study-restful-api-design@1.0.0 start C:\Users\Admin\Desktop\Study-RESTful-API-Design
                > node server.js "devStart"

                (node:1704) DeprecationWarning: current URL string parser is deprecated, and will be removed in a 
                future version. To use the new parser, pass option { useNewUrlParser: true } to MongoClient.connect.
                Your app is litening on Port 3000...

                --------------------------------------------------------------------------------------------------------

            *   To remedy this deprecation warning for the URL string parser, the warning asks you to pass in the 
                option "{ useNewUrlParser: true }" to "MongoClient.connect" because the old one is deprecated.

            *   All this means is we need to add an additional parameter to mongoose.connect with this option.

        Database string =   database       local storage    database name          passed in option
                                    \            |            /                        /
                ---------------------------------------------------------------------------------
                mongoose.connect('mongodb://localhost/subscribers', { useNewUrlParser: true });
                ----------------------------------------------------------------------------------


        STEP 3: Connect to your database:
        =================================
            *   This simply means that you are connecting (i.e. getting a reference) to the specified database (i.e. subscribers):
                    -------------------------------------
                    const db = mongoose.connection;
                    -------------------------------------

        
        STEP 4: Verify that your database connection is working properly:
        ================================================================
            *   This is important because it will show is the connection to the database was successful or not.

            *   First, if there is UNSUCCESSFUL (i.e. an error occured and something went wrong with the connection), 
                log out an error with an error object:
                    ---------------------------------
                    db.on('error', function() {
                        console.error(error);
                    });
                    ---------------------------------

            *   Second, if connection is SUCCESSFUL (i.e. once the connection is successful):
                *   Note: The "once" in db.once means that it will only run once.
                    ---------------------------------------------
                    db.once('error', function() {
                        console.log('Connected to Database...');
                    });
                    ---------------------------------------------

            *   When you run "npm run devStart", you will see the following if the connection was successful:
                    ---------------------------------------------------------------------------------------------
                    $ npm run devStart

                    > study-restful-api-design@1.0.0 devStart C:\Users\Admin\Desktop\Study-RESTful-API-Design
                    > nodemon server.js

                    [nodemon] 1.19.1
                    [nodemon] to restart at any time, enter `rs`
                    [nodemon] watching: *.*
                    [nodemon] starting `node server.js`
                    Your app is litening on Port 3000...
                    Connected to Database...                                                                       <== successful connection to database

                    ---------------------------------------------------------------------------------------------


        STEP 5: Relocate database string to .env file so we can use localhost AND external host later:
        ==============================================================================================
            *   While in development, having the database locally is ideal.  However, when you deploy the application
                you will want in something that is NOT local.  
            *   Additionally, you do NOT want to commit environment variables (i.e. the ".env" file).

            1.   First, if you havent already, create a ".env" file:
            
                .env


            2.  Copy the database string from mongoose.connect:
                -------------------------------------------------------------------------------
                mongoose.connect('mongodb://localhost/subscribers', { useNewUrlParser: true });    
                -------------------------------------------------------------------------------
                -------------------------------------------------------------------------------
                mongoose.connect('', { useNewUrlParser: true });                                ==>   mongodb://localhost/subscribers
                -------------------------------------------------------------------------------
                

            3.  Inside the ".env" file, create a variable called DATABASE_URL and set the value to the database string
                that we moved from server.js. 
                ------------------------------------------------
                DATABASE_URL=mongodb://localhost/subscribers
                ------------------------------------------------
                REMEMBER:
                *   The variables in your .env file MUST have the format of key=value.
                *   The variables in your .env file MUST NOT have breaks (i.e. no spaces).
                *   The variables in your .env file MIST NOT be commited to your repository (because sensitive passwords may be in there).


            4.  In server.js, replace the copied database url with "process.env.DATABASE_URL" which will
                link to the ".env" file and use the DATABASE_URL variable we just put in.
                ---------------------------------------------------------------------------------
                mongoose.connect('process.env.DATABSE_URL', { useNewUrlParser: true });
                ---------------------------------------------------------------------------------
                * Note that if you try to run this, you will get an error.
                * This is becasue we have NOT loaded the ".env" library


            5. Load the ".env" library in server.js
                *   Note, if you encounter an error, check to see if you installed "dotenv" as a dev dependency.
                -----------------------------------------
                require('dotenv').config();
                -----------------------------------------


            OPTIONAL: Check to see if you have access to your environment variables
                * Note: You can check to see if you have access to your environment variables via the process.env object
                ----------------------------------------
                console.log(process.env);
                ----------------------------------------


PHASE 4: Add initial middleware:
=================================
    *   Middlewares are code that run when the server gets a request but BEFORE that request gets sent to your application routes.
    *   There are many middlewares that can be used in your stack, running one after the other, including built-in, third-party, 
        and custom middleware.

    SHORT VERSION
    =============

    EXTENDED VERSION
    ================
        STEP 1: Setup server to accept JSON:
        =======================================================================
            *   One of the first important middlewares to use is a built-in middleware called express.json, which allows
                the server to accept incoming requests as a JSON body rather than a POST, GET, etc. element.
                -------------------------------
                app.use(express.json());
                -------------------------------



PHASE 5: Setup Router(s):
=========================
    *   Instead of having all our routes inside the server.js file, which can make the file cluttered and messy, we can use Routers.
    *   Routers are the seperate files that are going to hold all the routes for our application.
    *   For a full examination of express routers, see: https://github.com/john-azzaro/Study-Express-Router
    *   For the purposes of this study, we'll go step-by-step through process:

    SHORT VERSION
    =============
        1. Create "routes" folder.
        2. Setup router to route requests for a given API (i.e. subscribers).
        3. Create a Router file (inside "routes") that matches the previous loaded router.
        4. Tell the app to use the Router for incoming requests to that route.

    EXTENDED VERSION
    ================
        STEP 1: Create a "routes" folder inside your project folder.
        ============================================================
            *   This "routes" folder will hold all the routes for as many API's as you have for your application.

                routes


        STEP 2: In server.js setup a router to load the Router for your specific API's:
        ================================================================================
            *   In this case, we have a subscribers API so we need a dedicated router to handle these routes to keep
                the server.js file clean and tidy.
            *   What this code does is import the router file (./routes/subscribers) and save as a constant named "subscriberRouter".
                -----------------------------------------------------------
                const subscriberRouter = require('./routes/subscribers');  
                -----------------------------------------------------------


        STEP 3: Inside "routes", create a JavaScript file that matches the same name as the Router endpoint:
        ===================================================================================================
            *   In the case of this study, we want to have a Router file named "subscribers".
            *   IMPORTANT: The name of the file in "routes" MUST match the endpoint filename.

                routes > subscribers.js


        STEP 4: Inside server.js, tell the app use "subscriberRouter" when a request is made to "/subscribers":
        ========================================================================================================
            *   Previously you setup the Router so that in this step, you can tell the server to specifically use this Router.
                ----------------------------------------------
                app.use('/subscribers', subscriberRouter);
                ----------------------------------------------

            *   What happens here is that any request that has "subscribers" in it, such as "localhost:3000/subscribers", 
                or anything after it (i.e. "localhost:3000/subscribers/members") will be fed to the "subscribers" Router 
                we just created.

            *   So basically, this says that when a request comes in with "subscribers" in the url string, run "subscribeRouter", 
                which will point to the "routes" folder and then "subscribers.js" file.

            DEVELOPMENT NOTE: If you try to run "npm run devStart" at this point, you will get an error that says that the Router.use
                              requires middleware.  This is because we have not added anything to our Router yet (blank at this point).
                              This will be remedied in the next step.


        STEP 5: Setup your router file (e.g. subscribers.js):
        ======================================================
            *   In your router file (e.g. subscribers.js), do the following:
                1.   First, you need to load express.
                2.   Second, you need to load the router from express and save as a constant named "router" so we can you the router protion of express.
                3.   Third, export the router so we can access it in server.js.
                -----------------------------------
                const express = require('express');
                const router = express.Router();

                    ...routes go here...

                module.exports = router;
                -----------------------------------


PHASE 6: Create Routes:
========================
    SHORT VERSION
    =============
        1. Create route pseudo-code shell.
        2. 
        3.
        4.

    EXTENDED VERSION
    ================
        *   For the routes, we want the following CRUD operations:
            1. CREATE a subscriber     
            2. READ a subscriber        
            3. READ all subscribers    
            4. UPDATE a subscriber     
            5. DELETE a subscriber     

        DEVELOPMENT NOTE: It's useful to put comment all of these routes in your route document so you have a 
                        broad idea of what routes you need to include.
                            --------------------------------
                            // GET ALL subscribers
                            // GET One subscriber
                            // CREATE subscriber
                            // UPDATE subsrcriber
                            // DELETE Subscriber
                            --------------------------------

        STEP 1: First, create your pseudo code "shell" for all the routes:
        ==================================================================
            *   REMEMBER: If you were creating the route inside the server.js file, you would be using "app.get".  However,
                now we are using the router part of express, we call "router".

            ---------------------------------------------------------------------
            
            // GET ALL subscribers
            router.get('/', function(req, res) {                             <== for all, we want the direct path.

            });

            // GET One subscriber                                            <== to get one subscriber, we need to add the :id  parameter (represents the subscriber).
            router.get('/:id', function(req, res) {

            });

            // CREATE subscriber                                             <== Create a subscriber on the general route.
            router.post('/', function(req, res) {

            });

            // UPDATE subscriber
            router.patch('/:id', function(req, res) {                        <== update with "patch" so we update only what the user passes with the :id parameter

            });

            // DELETE Subscriber                                             <== delete with user id parameter.
            router.delete('/:id', function(req, res) {

            });

            ---------------------------------------------------------------------

            DEVELOPMENT NOTES: 
                *   For GET (all) requests, we want to use the direct path "/" because thats where all of our subscribers will be.
                *   For GET (one) requests, we want to use the direct path + the id (i.e. /:id) parameter so that we can select a specific subscriber.
                *   For POST (one) requests, we want to use the direct path "/" because that is where we want to place our new user.
                *   For PATCH (update) requests, we want only update what the user passes (i.e. username, etc.) and not any other information.
                        *   If you you use a PUT request, it will update EVERYTHING, which we do not want to do in this scenario.
                *   For DELETE (one) requests, we want to use the direct path + the id (same as GET one).
 

            OPTIONAL: Test your routes using "res.send('')":
            ================================================
                *   To test the basic GET routes you just created, open up Postman and test a route.
                *   For example:

                    1. For GET all route:
                    ----------------------------------
                    res.send('This is a test');            ==>   http://localhost:3000/subscribers  ==>  will send contents of /subscribers!
                    ----------------------------------
                    2. For GET one route:
                    ----------------------------------
                    res.send(req.params.id);               ==>   http://localhost:3000/subscribers/12   =>  will send the contents of matching id!
                    ----------------------------------

                *   You can also use the "REST Client" add-on for VSCode, which will allow you to test your routes inside the editor instead
                    of using Postman.  You would simply need to install the add-on, create a file inside your routes called "route.rest"
                    (or any name you wish to give it as long as it ends in .rest or .http) and inside that file, and make a request, for example:
                    -----------------------------------------------
                    GET http://localhost:3000/subscribers
                    -----------------------------------------------
                    hover over that line of code and you will see a "send request".  Click this and you will get a response in the form of the HTTP object!

                    Additionally, you can add three hashtags (i.e. ###) between each request to seperate additional routes.

                

PHASE 

















// Additional resources
https://alligator.io/nodejs/express-basics/  -- good overview of basic express app 
https://www.freecodecamp.org/news/how-to-write-a-production-ready-node-and-express-app-f214f0b17d8c/  -- good overview
https://scotch.io/tutorials/using-mongoosejs-in-node-js-and-mongodb-applications  -- mongoose and mongoDB overview
https://mongoosejs.com/docs/connections.html - mongoose connections
https://www.tutorialkart.com/nodejs/mongoose/connect-to-mongodb/ -- connecting to database guide
https://medium.com/@thejasonfile/using-dotenv-package-to-create-environment-variables-33da4ac4ea8f  --  dotenv file
https://dev.to/deammer/loading-environment-variables-in-js-apps-1p7p -- dotenv file
https://expressjs.com/en/guide/using-middleware.html  -- middleware (express.json)
https://scotch.io/tutorials/learn-to-use-the-new-router-in-expressjs-4 -- express router